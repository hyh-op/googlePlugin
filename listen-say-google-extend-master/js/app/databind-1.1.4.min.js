/**
 * 表单集合插件，调用方式 $. $.databind(options);
 * version : 1.1.4
 * date : 2019.05.17
 * email : wangxx20@qq.com
 * @param {Object} options
 * @param options.area 元素选定范围
 * @param options.focus 自动移入焦点
 * @param options.bindAttr 数据绑定属性，默认：vf-bind
 * @param options.ruleAttr 验证规则绑定属性，默认vf-rule
 * @param options.autoInit 自动初始化：true or false
 * @param options.extends => {} 验证方法扩展配置
 * @param options.elementSuccHandle 单个元素项验证成功回调
 * @param options.completeSuccHandle 一个validate验证成功回调
 * @param options.errorHandle 验证错误回调
 *
 * @function init()
 * @function set(name:string,object , value:mixed)
 * @function setNot(data:object , nots:string)
 * @function get(name:mixed,string , state:bool)
 * @function remove(name:string)
 * @function clear(name:string,bool)
 * @function validate(name:string , options:object)
 * @function element(name:string)
 * @function tools()
 *
 * html元素属性：
 * 1.vf-rule （必填）验证类型[可多个，用 "|" 进行分割]。以下为内置验证规则说明：
 *   (1).固定规则：require（必须）、email、phone、mobile、idcard、gbk、url、username（常规用户名）
 *   (2).可变量规则：date（日期验证，date:y-m-d）、min（数字，min:5）、max、sMin（字符串长度最小值，sMin:10）、sMax、length（字符串长度范围，length:1,10；length:10）
 *                in（在列表中，in:1,2,3）、notIn、between（数字在..范围，between:1,10）、notBetween、is（数据类型验证、支持float、int、number、array、object；）
 *                regex（正则自定义验证）
 *                when（自定义表达式验证）当表达式满足时，验证通过
 *                if（自定义表达式验证）当表达式满足时，才执行该元素规则验证
 *                func（自定义函数验证，调用全局函数，自动传入当前元素值、元素对象；func:test）
 *
 * 2.vf-msg  （必填）验证错误提示[可多个，用 "|" 进行分割，顺序与vf-rule对应]
 * 3.vf-focus（可选）焦点移开时验证
 * 4.vf-realtime（可选）input实时验证
 * 5.vf-tips （可选）自定义提示携带参数
 * 6.vf-bind
 */


/**
 * 更新日志：
 * 2019.04.09 修复 get() state=false时，获取值bug
 */

;(function () {
    /**
     * @param options
     */
    function databind(options) {
        this.options = $.extend({}, databind.defaults , options || {});
        this.formFields = [];
        this.dataFields = [];
        this.dataArray  = {};
        this.dataSource = {ele:[],source:[],focus:[]};

        //初始化
        if (this.options.autoInit === true) {
            this.init();
        }
    }

    /**
     * @type {{area: string, focus: boolean, bindAttr: string, ruleAttr: string, autoInit: boolean, elementSuccHandle: elementSuccHandle, completeSuccHandle: completeSuccHandle, errorHandle: errorHandle}}
     */
    databind.defaults = {
        area: 'body',
        focus: true,
        bindAttr:'vf-bind',
        ruleAttr:'vf-rule',
        autoInit:true,
        extends:{},
        elementSuccHandle:function (thisEle , tipsEle) {},
        completeSuccHandle:function () {},
        errorHandle:function (message , thisEle , tipsEle) {
            alert(message);
        }
    };


    databind.prototype.init = function() {
        var $this = this,
            options = $this.options;

        var bindRange = options.area + " ["+ options.bindAttr +"]";
        $(bindRange).each(function (e) {
            var _this = $(this);
            var eleName = _this.attr(options.bindAttr);
            if (!isNull(eleName)) {
                $this.formFields.push(eleName);
            }
        });

        var ruleRange = options.area + " ["+ options.ruleAttr +"]";
        var focusElement = [];
        var realTimeElement = [];
        var eleSource = [];
        var element = [];
        $(ruleRange).each(function (e) {
            var _this = $(this) , eleName , attribute;
            //attribute
            attribute = $this.getElementAttribute(_this);
            if (isNull(attribute)) {
                return true;
            }

            if (attribute.vf_focus && attribute.vf_realtime) {  //realtime
                realTimeElement.push({ele:_this,data:attribute});
            } else if (attribute.vf_focus) { //focus
                focusElement.push({ele:_this,data:attribute});
            } else if (attribute.vf_realtime) { //realtime
                realTimeElement.push({ele:_this,data:attribute});
            }

            eleSource[e] = attribute;
            element[e] = _this;
        });
        $this.dataSource.ele = element;
        $this.dataSource.source = eleSource;
        $this.dataSource.focus = focusElement;

        //elementFocusBind
        $this.elementFocusBind(focusElement);
        //elementRealTimeBind
        $this.elementRealTimeBind(realTimeElement);

        //this
        return $this;
    };


    /**
     * @param focus
     * @returns {boolean}
     */
    databind.prototype.elementFocusBind = function (focus) {
        var $this = this;

        if (isNull(focus)) {
            return true;
        };
        if (focus.constructor != Array) {
            return true;
        }
        //for
        for (var k in focus) {
            var element = focus[k].ele;
            var attribute = focus[k].data;

            //bind event
            (function (element , attribute) {
                (element).unbind('blur').blur(function () {
                    //setings
                    var setings = $this.options;
                    var focusArr = setings.focus;

                    try {
                        $this.validateRule([element] , [attribute] , focusArr , setings);
                    } catch (e) {
                        // type 1 提示信息 ， 2 插件异常
                        if (e.type == 1) {
                            if (typeof setings.errorHandle == 'function') {
                                setings.errorHandle(isNull(e.message) ? '格式验证不正确！' : e.message , e.thisEle , e.tipsItem);
                            } else {
                                console.log(e.message);
                            }
                            return false;
                        }
                        throw e;
                    }
                });
            })(element , attribute);
        }
    };


    /**
     * @param eles
     * @returns {boolean}
     */
    databind.prototype.elementRealTimeBind = function (eles) {
        var $this = this;

        if (isNull(eles)) {
            return true;
        };
        if (eles.constructor != Array) {
            return true;
        }
        //for
        for (var k in eles) {
            var element = eles[k].ele;
            var attribute = eles[k].data;

            //bind event
            (function (element , attribute) {
                (element).unbind('watch').watch(function () {
                    //setings
                    var setings = $this.options;
                    var focusArr = setings.focus;

                    try {
                        $this.validateRule([element] , [attribute] , focusArr , setings);
                    } catch (e) {
                        // type 1 提示信息 ， 2 插件异常
                        if (e.type == 1) {
                            if (typeof setings.errorHandle == 'function') {
                                setings.errorHandle(isNull(e.message) ? '格式验证不正确！' : e.message , e.thisEle , e.tipsItem);
                            } else {
                                console.log(e.message);
                            }
                            return false;
                        }
                        throw e;
                    }
                });
            })(element , attribute);
        }
    };


    /**
     * @param options
     * @returns {boolean}
     */
    databind.prototype.validate = function (name , options) {
        var $this = this , setings = {} , element = [] , rules = [] , focus;
        var defs = {};
        if (options && options.constructor == Object) {
            if (options.hasOwnProperty('elementSuccHandle')) defs.elementSuccHandle = options.elementSuccHandle;
            if (options.hasOwnProperty('completeSuccHandle')) defs.completeSuccHandle = options.completeSuccHandle;
            if (options.hasOwnProperty('errorHandle')) defs.errorHandle = options.errorHandle;
            if (options.hasOwnProperty('focus')) defs.errorHandle = options.focus;
        }
        //setings
        setings = $.extend({}, $this.options , defs);
        focus = setings.focus;
        if (name && name.constructor == String) {
            var vstr = name.split(',');
            for (var k in vstr) {
                try {
                    var vele = $this.getElement(vstr[k]);
                    var attribute = $this.getElementAttribute(vele);
                } catch (e) {
                    throw new Error('element error !');
                }
                if (isNull(attribute)) {
                    throw new Error('element type error !');
                }
                element.push(vele);
                rules.push(attribute);
            }
        } else {
            element = $this.dataSource.ele;
            rules = $this.dataSource.source;
        }

        try {
            $this.validateRule(element , rules , focus , setings);
        } catch (e) {
            // type 1 提示信息 ， 2 插件异常
            if (e.type == 1) {
                if (typeof setings.errorHandle == 'function') {
                    setings.errorHandle(isNull(e.message) ? '格式验证不正确！' : e.message , e.thisEle , e.tipsEle);
                } else {
                    console.log(e.message);
                }
                return false;
            }
            throw e;
            return false;
        }

        //验证完成回调
        if (typeof setings.completeHandle == 'function') {
            setings.completeHandle();
        }
        return true;
    };

    /**
     * @param name
     * @param state
     * @returns {*}
     */
    databind.prototype.get = function(name , state) {
        var $this = this;
        if (state === undefined) {
            state = true; //in
        }

        /**
         * @param name
         */
        function getMore(name) {
            var data = {};
            if (isNull(name)) return data;
            for (var k in name) {
                data[ name[k] ] = $this.getBindValue( name[k] );
            }
            return data;
        }
        //all
        if (!name) {
            var all = $this.formFields.concat($this.dataFields);
            return getMore(all);
        }
        if (name.constructor != String) return null;
        //one
        if (name.indexOf(',') == -1 && state) {
            return $this.getBindValue( name );
        }
        name = name.split(',');
        //more(in)
        if (state === true) {
            //return
            return getMore(name);
        }
        //more(not in)
        var all = $this.formFields.concat($this.dataFields);
        for (var k in name) {
            if (in_array(name[k] , all)) {
                all = arrayRemove(all , name[k]);
            }
        }
        return getMore(all)
    };

    /**
     * @param name
     * @param value
     * @returns {databind}
     */
    databind.prototype.set = function(name , value) {
        var $this = this;
        if (!name) return $this;

        if (name.constructor == Object) {
            $this.setBindValue(name);
        } else if (name.constructor == String) {
            var one = {}; one[name] = value;
            $this.setBindValue(one);
            return $this;
        }
        return $this;
    };


    /**
     * @param data
     * @param nots
     * @returns {databind}
     */
    databind.prototype.setNot = function (data , nots) {
        var $this = this;
        if (data === undefined) return $this;
        if (nots === undefined) nots = [];
        if (nots.constructor == String) {
            nots = nots.split(',');
        }
        if (data.constructor != Object) {
            return $this;
        }
        $this.setBindValue(data , nots);
        return $this;
    };


    /**
     * @param name
     */
    databind.prototype.remove = function(name) {
        var $this = this;
        if (name === undefined) return;
        if (name.constructor != String) return;
        var more = name.split(',');
        //more
        for (var k in more) {
            var key = more[k];
            if (in_array(key , $this.formFields)) {
                $this.formFields = arrayRemove($this.formFields , key);
                continue;
            }
            if (in_array(key , $this.dataFields)) {
                $this.dataFields = arrayRemove($this.dataFields , key);
                delete $this.dataArray[key];
                continue;
            }
        }
    };


    /**
     * @param name
     */
    databind.prototype.clear = function(name) {
        var $this = this;
        if (name === undefined) return;
        if (name === true) {
            //clear all
            var more = $this.formFields.concat($this.dataFields);
        } else if (name.constructor == String) {
            var more = name.split(',');
        } else {
            return;
        }

        //more
        for (var k in more) {
            var key = more[k];
            //form
            if (in_array(key , $this.formFields)) {
                $this.setFromValue(key , '');
                continue;
            }
            if (in_array(key , $this.dataFields)) {
                $this.dataArray[key] = '';
                continue;
            }
        }
    };



    /**
     * @param name
     * @returns {*}
     */
    databind.prototype.element = function (name) {
        var $this = this;
        if (name === undefined) return null;

        try {
            return $this.getElement(name);
        } catch (e) {
            throw new Error('element error !');
        }
    };


    /**
     * @param element
     * @param rules
     * @param focus
     * @param options
     * @returns {boolean}
     */
    databind.prototype.validateRule = function (element , rules , focus , options) {
        var $this = this , ruleEleAttr , bindEleAttr;
        if (isNull(rules)) {
            return true;
        }
        //replace
        ruleEleAttr = options.ruleAttr.replace('-' , '_');
        bindEleAttr = options.bindAttr.replace('-' , '_');

        for (var v in element) {
            var vf_this = element[v];
            var is_parents = vf_this.parents().is(options.area);
            if (!is_parents) {
                continue;
            }
            var thisRule = rules[v];
            //validate tag
            var tagName = vf_this.context.tagName.toLocaleLowerCase();
            if (!in_array(tagName, "input,select,textarea")) {
                continue;
            }
            var vf_rule = thisRule[ruleEleAttr];
            var vf_bind = thisRule[bindEleAttr];
            var vf_msg  = thisRule.vf_msg;
            var vf_tips = thisRule.vf_tips;
            var vf_id   = '#' + thisRule.id;
            if (isNull(vf_rule)) {
                continue;
            }
            //提示规则
            var msgRule = vf_msg.split('|');
            //获取值
            var thisValue = $this.getFromValue(vf_this , 2);
            var loopRule  = vf_rule.split('|');
            //If验证规则
            var thisIf = false;
            for (var l in loopRule) {
                if (loopRule[l].indexOf('if:') != -1) {
                    thisIf = loopRule[l];
                    loopRule.splice(l , 1);
                }
            }
            //遍历规则
            for (var rule in loopRule) {
                var thisRule = loopRule[rule];
                var thisMsg = msgRule[rule];
                if (isNull(thisMsg) && !isNull(msgRule)) {
                    thisMsg = msgRule[msgRule.length-1];
                }

                //If规则
                if (thisIf !== false) {
                    var ifRule = arraySplitRule(thisIf);
                    var ifRes = $this.tools().when(thisValue , ifRule[1]);
                    //不通过if验证，跳过验证
                    if (!ifRes) {
                        break;
                    }
                }

                //空值跳过
                if (!in_array('require' , loopRule) && isNull(thisValue)) {
                    break;
                }

                //解析当前规则
                var splitRule = arraySplitRule(thisRule);
                //检测属性
                if (!$this.tools().hasOwnProperty(splitRule[0]) && splitRule[0] != 'func') {
                    throw new ErrorException('内置验证规则不存在！');
                }
                if (splitRule.length == 1) {
                    var vfResult = $this.tools()[ splitRule[0] ](thisValue);
                } else if (splitRule.length == 2) {
                    //调用全局函数处理
                    if (splitRule[0] == 'func') {
                        if (typeof window[splitRule[1]] != 'function') {
                            throw new ErrorException('全局函数：'+splitRule[1]+' 不存在！');
                        }
                        var vfResult = window[splitRule[1]](thisValue , vf_this);
                    } else {
                        if (splitRule.length > $this.tools()[ splitRule[0] ].length) {
                            throw new ErrorException('规则填写错误 101！');
                        }
                        var vfResult = $this.tools()[ splitRule[0] ](thisValue , splitRule[1]);
                    }
                } else {
                    throw new ErrorException('规则填写错误 102！');
                }

                //验证不通过
                if (vfResult !== true) {
                    if (focus) vf_this.focus();
                    if (vfResult !== false) {
                        throw new ErrorException(String(vfResult) , 1 , vf_this , vf_tips);
                    }
                    throw new ErrorException(thisMsg , 1 , vf_this , vf_tips);
                }

                //单项验证通过回调
                if (typeof options.succHandle == 'function') {
                    options.succHandle(vf_this , vf_tips);
                }
            }
        }
    };


    /**
     * @param data
     * @param nots
     */
    databind.prototype.setBindValue = function (data , nots){
        var $this = this;
        if (data.constructor != Object) {
            return;
        }
        if (nots === undefined) nots = [];
        for (k in data) {
            if (in_array(k , nots)) {
                continue; //continue
            }

            //from field
            if (in_array(k , $this.formFields)) {
                $this.setFromValue(k , data[k]);
            } else {
                if (!in_array(k , $this.dataFields)) {
                    $this.dataFields.push(k);
                }
                $this.dataArray[k] = data[k];
            }
        }
    };


    /**
     * @param name
     * @returns {*}
     */
    databind.prototype.getBindValue = function (name){
        var $this = this;

        if (name.constructor != String) {
            return null;
        }
        if (in_array(name , $this.formFields)) {
            return $this.getFromValue(name);
        } else if (in_array(name , $this.dataFields)) {
            if ($this.dataArray.hasOwnProperty(name)) {
                return $this.dataArray[name];
            }
            return null;
        }
        return null;
    };


    /**
     * @param name
     * @param value
     */
    databind.prototype.setFromValue = function (name , value) {
        var $this = this , ele , type;
        if (name.constructor != String) {
            return;
        }
        if (value === undefined || value === null) return;

        //element
        ele = $this.getElement(name);
        if (isNull(ele)) return;

        type = $this.getElementType(ele);
        //set
        if (in_array(type, "text,number,email,hidden,password,textarea,date")) {
            ele.val(value);
        } else if (in_array(type, "select")) {
            if (value && value.constructor != Array){
                value = String(value).split(',');
            }
            ele.val(value);
        } else if (in_array(type, "checkbox")) {
            //checkbox
            var eleName = ele.attr("name");
            if (value && value.constructor != Array){
                value = String(value).split(',');
            }
            //clear
            $($this.options.area + " input[name='"+eleName+"']").prop("checked" , false);
            //赋值
            for (var i in value) {
                $($this.options.area + " input[name='"+eleName+"'][value='"+value[i]+"']").prop("checked" , true);
            }
        } else if (in_array(type, "radio")) {
            //单选框
            var eleName = ele.attr("name");
            //clear
            $($this.options.area + " input[name='"+eleName+"']").prop("checked" , false);
            //set
            $($this.options.area + " input[name='"+eleName+"'][value='"+value+"']").prop("checked" , true);
        }
    };


    /**
     *
     * @param name
     * @returns {*}
     */
    databind.prototype.getFromValue = function (name , flag) {
        var $this = this , ele , type , thisValue;
        if (flag === undefined) flag = 1; //获取类型：1值，2验证

        if (name.constructor == String) {
            if (flag == 2 && (name.indexOf('.') != -1 || name.indexOf('#') != -1)) {
                ele = $($(name)[0]);
            } else {
                //element
                ele = $this.getElement(name);
                if (isNull(ele)) return null;
            }
        } else {
            ele = name;
        }

        type = $this.getElementType(ele);
        //get
        if (in_array(type, "text,number,email,hidden,password,textarea,select,date")) {
            thisValue = ele.val();
        } else if (in_array(type, "checkbox")) {
            //多选框
            var eleName  = ele.attr("name");
            thisValue = [];
            $($this.options.area + " input[name='"+eleName+"']:checked").each(function () {
                thisValue.push( $(this).val() );
            });
            if (flag == 2) {
                return thisValue.length == 0 ? '' : thisValue.length;
            }
        } else if (in_array(type, "radio")) {
            //单选框
            eleName = ele.attr("name");
            thisValue = $($this.options.area + " input[name='"+eleName+"']:checked").val();
            if (thisValue == undefined) return '';
        } else {
            return null;
        }
        return thisValue;
    }


    /**
     * @param element
     * @returns {*}
     */
    databind.prototype.getElementAttribute = function(element) {
        var $this = this , attribute = {} , ruleAttrs = [$this.options.bindAttr , "vf-tips" , 'vf-focus' , 'vf-realtime' , $this.options.ruleAttr , "vf-msg" , "class" , "id" , "type"];
        //tagName
        eleName = element.context.tagName.toLocaleLowerCase();
        //null
        if (!in_array(eleName , "input,select,textarea" , "in")) {
            return null;
        }
        for (var i in ruleAttrs){
            var thisAttr = ruleAttrs[i].replace("-" , "_");
            if (in_array(thisAttr , 'vf_focus,vf_realtime')) {
                if (element.attr(ruleAttrs[i]) === undefined) {
                    attribute[thisAttr] = false;
                } else {
                    attribute[thisAttr] = true;
                }
            } else {
                attribute[thisAttr] = isNull(element.attr(ruleAttrs[i])) ? "" : element.attr(ruleAttrs[i]);
            }
        }
        //attribute
        return attribute;
    };


    /**
     *
     * @param name
     * @returns {*}
     */
    databind.prototype.getElement = function (name) {
        var $this = this , ele;

        ele = $this.makeElementQuery(name , $this.options.bindAttr);
        if ($(ele).length == 0) {
            return null;
        }
        return $($(ele)[0]);
    }


    /**
     *
     * @param name
     * @returns {*}
     */
    databind.prototype.getElementType = function (name) {
        var $this = this;

        var element , tagName;
        if (typeof name == 'string') {
            element = $(name);
            tagName = element[0].tagName.toLocaleLowerCase();
        } else {
            element = name;
            tagName = element.context.tagName.toLocaleLowerCase();
        }
        if (in_array(tagName, "select,textarea")) {
            type = tagName;
        } else {
            type = element.attr('type');
        }
        return type;
    };


    /**
     *
     * @param name
     * @param attr
     * @returns {*}
     */
    databind.prototype.makeElementQuery = function (name , attr) {
        var $this = this , query;

        if (!isNull($this.options.area)) {
            query = $this.options.area + " ["+ attr +"='"+name+"']";
        } else {
            query = "["+ attr +"='"+name+"']";
        }
        return query;
    };


    /**
     * @returns tools
     */
    databind.prototype.tools = function () {
        var $this = this;

        this.require = function (value) {
            return !isNull(value);
        };
        this.email = function (value) {
            return /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(value);
        }
        this.phone = function (value) {
            return /^(\d|-){722}$/.test(value);
        }
        this.mobile = function (value) {
            return /^1[3456789]\d{9}$/.test(value);
        }
        this.idcard = function (value) {
            return /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/.test(value);
        }
        this.gbk = function (value) {
            return /^[\u4e00-\u9fa5]{0,}$/.test(value);
        }
        this.url = function (value) {
            return /https?:\/{2}[^\s]*/.test(value);
        }
        /**
         * 常规昵称验证
         * @param value
         * @returns {*|boolean}
         */
        this.name = function (value) {
            return /(^[A-Za-z]{4,20}$)|(^[\u4E00-\u9FA5]{2,20}$)|(^(?!\d)[\u4E00-\u9FA5A-Za-z0-9]{3,20}$)/.test(value);
        }
        /**
         * 常规用户名验证，仅支持数字、字母、下划线、.等，以字母开头
         * @param value
         */
        this.username = function (value) {
            return /^[a-zA-Z]{1}([a-zA-Z0-9]|[._])*$/.test(value);
        }
        /**
         * 日期格式验证
         * @param value
         * @param format 自定义格式，格式符ymdhis
         * @returns {boolean}
         */
        this.date = function (value , format) {
            var regx;
            if ($.trim(format) == '') return false;
            //生成正则
            regx = (format.replace(/(m|d|h|i|s)/ig , '\\d{1,2}')).replace(/(y)/ig , '\\d{4}');
            regx = new RegExp('^'+regx+'$');
            return regx.test(value);
        }
        this.min = function (value , rule) {
            return parseFloat(value) >= parseFloat(rule);
        }
        this.max = function (value , rule) {
            return parseFloat(value) <= parseFloat(rule);
        }
        this.sMin = function (value , rule) {
            return getStrLenght(value) >= rule;
        }
        this.sMax = function (value , rule) {
            return getStrLenght(value) <= rule;
        }
        this.length = function (value , rule) {
            var length = String(rule).split(',');
            if (length.length == 1) {
                return getStrLenght(value) == length[0];
            }
            return parseFloat(getStrLenght(value)) >= parseFloat(length[0]) && parseFloat(getStrLenght(value)) <= parseFloat(length[1]);
        }
        /**
         * 值在列表中
         * @param value
         * @param rule 1,2,3,4
         * @returns {boolean}
         */
        this.in = function (value , rule) {
            return evq(value , rule , 'in');
        }
        /**
         * 值不在列表中
         * @param value
         * @param rule 1,2,3,4
         * @returns {boolean}
         */
        this.notIn = function (value , rule) {
            return evq(value , rule , 'notIn');
        }
        this.between = function (value , rule) {
            return evq(value , rule , 'between');
        }
        this.notBetween = function (value , rule) {
            return evq(value , rule , 'notBetween');
        }
        /**
         * 数据类型验证
         * @param value
         * @param rule
         */
        this.is = function (value , rule) {
            if ($.trim(value) == '') return false;
            switch (rule) {
                case 'float':
                    return /^(-)*\d*\.+\d{1,10}$/.test(value);
                    break;
                case 'int':
                    return /^(-)*\d+$/.test(value);
                    break;
                case 'number':
                    return !isNaN(value);
                    break;
                case 'array':
                    return value.constructor == Array;
                    break;
                case 'object':
                    return value.constructor == Object;
                    break;
                default:
                    return false;
            }
        }
        this.regex = function (value , rule) {
            var regx = new RegExp(rule);
            return regx.test(value);
        }
        /**
         * 表达式验证
         * @param value
         * @param rule
         * @returns {*}
         */
        this.when = function (value , rule) {
            if (isNull(rule)) {
                return false;
            }

            try {
                return resolveExp(rule);
            } catch (e) {
                throw new ErrorException('resolveExp : ' + e.message , 2);
            }
            /**
             * 验证表达式
             * @param rule
             * @returns {*}
             */
            function resolveExp(rule) {
                var result , i = 1 , variable = {} , tmp = 'tmp';
                var textReg = new RegExp('(?<!\\$|\\w)(\\(){1}((\\.|#|-|\\w|\\s)+)(\\)){1}');

                while( ( result = rule.match(textReg) ) != null) {
                    var name = 'tmp' + i;
                    variable[name] = $this.getFromValue(result[2] , 2);
                    //replace
                    var treg = new RegExp("\\(" +result[2]+ "\\)", 'g');
                    rule = rule.replace(treg , 'data.' + name);
                    //index
                    i++;
                }

                return new Function('data' , 'vf' , 'return ' + rule)(variable , $this);
            }
        }

        //extends
        if ($this.options.extends.constructor == Object) {
            for (var i in $this.options.extends) {
                if (typeof $this.options.extends[i] == "function") {
                    this[i] = $this.options.extends[i];
                }
            }
        }

        //return
        return this;
    };


    /**
     * 搜索某个值是否存在数组之内
     * @param needle
     * @param haystack
     * @returns {boolean}
     */
    function in_array(needle, haystack) {
        if (haystack.constructor != Array) {
            haystack = String(haystack).split(',');
        }
        var length = haystack.length;
        for(var i = 0; i < length; i++) {
            if(haystack[i] == needle) return true;
        }
        return false;
    }

    /**
     * 检验数据是否为 null，undefined，""
     * @param string
     * @returns {boolean}
     */
    function isNull(string) {
        string = $.trim(string);
        if (string === 0) return false;
        if (string == "" || string == undefined || string == null) return true;
        return false;
    }

    /**
     * @param array
     * @param val
     * @returns {*}
     */
    function arrayRemove(array , val) {
        if (!array || array.constructor != Array) {
            return;
        }
        var index = array.indexOf(val);
        if (index > -1) {
            array.splice(index, 1);
        }
        return array;
    };

    /**
     * @param thisRule
     * @returns {*}
     */
    function arraySplitRule(thisRule) {
        var splitRule = thisRule.split(':');
        if (splitRule.length <= 2) {
            return splitRule;
        }

        var newRule = splitRule;
        newRule = newRule.slice(1);
        newRule = newRule.join(':');
        return new Array(splitRule[0] , newRule);
    }


    /**
     * 获取字符串的长度，区分中英文
     * @param message
     * @returns {number}
     */
    function getStrLenght(message) {
        //判断是不是中文
        var isCN = function (str) {
            var regexCh = /[u00-uff]/;
            return !regexCh .test(str);
        }
        var strlenght = 0; //初始定义长度为0
        var txtval = $.trim(message);
        for (var i = 0; i < txtval.length; i++) {
            if (isCN(txtval.charAt(i)) == true) {
                strlenght = strlenght + 1; //中文为2个字符
            } else {
                strlenght = strlenght + 1; //英文一个字符
            }
        }
        return strlenght;
    }


    /**
     * 对两个值进行判断
     * @param v1
     * @param v2
     * @param type
     * @returns {boolean}
     */
    function evq(v1,v2,type) {
        if (type === undefined) type = "eq";

        switch ( type ) {
            case ">=":
                return parseFloat(v1) >= parseFloat(v2);
                break;
            case "<=":
                return parseFloat(v1) <= parseFloat(v2);
                break;
            case ">":
                return parseFloat(v1) > parseFloat(v2);
                break;
            case "<":
                return parseFloat(v1) < parseFloat(v2);
                break;
            case "eq":
            case "==":
                return v1 == v2;
                break;
            case "neq":
            case "!=":
                return v1 != v2;
                break;
            case "in":
                var strs = v2.split(",");
                return in_array(v1 , strs);
                break;
            case "notIn":
                var strs = v2.split(",");
                return !in_array(v1 , strs);
                break;
            case "between":
                var between = v2.split(",");
                return parseFloat(v1) >= parseFloat(between[0]) && parseFloat(v1) <= parseFloat(between[1]);
                break;
            case "notBetween":
                var notBetween = v2.split(",");
                return parseFloat(v1) < parseFloat(notBetween[0]) && parseFloat(v1) > parseFloat(notBetween[1]);
                break;
            default:
                return false;
        }
    }


    /**
     * @param message
     * @param type  1 提示信息 ， 2 插件异常
     * @param thisEle
     * @param tipsEle
     * @constructor
     */
    function ErrorException(message, type , thisEle , tipsEle) {
        if (!type) type = 2;
        if (!thisEle) thisEle = {};
        if (!tipsEle) tipsEle = null;

        this.type    = type;
        this.message = message;
        this.thisEle = thisEle;
        this.tipsEle = tipsEle;
    }



    $.extend({
        databind:function (options) {
            return new function (options) {
                var instance = new databind(options);;

                this.init = function () {
                    var $this = this;
                    instance.init();
                    return $this;
                };
                this.set = function (name , value) {
                    var $this = this;
                    instance.set(name , value);
                    return $this;
                };
                this.setNot = function (data , nots) {
                    var $this = this;
                    instance.setNot(data , nots);
                    return $this;
                };
                this.get = function (name , state) {
                    var $this = this;
                    return instance.get(name , state);
                };
                this.remove = function (name) {
                    var $this = this;
                    return instance.remove(name);
                };
                this.clear = function (name) {
                    var $this = this;
                    return instance.clear(name);
                };
                this.validate = function (name , options) {
                    var $this = this;
                    return instance.validate(name , options);
                };
                this.element = function (name) {
                    var $this = this;
                    return instance.element(name);
                };
                this.tools = function () {
                    var $this = this;
                    return instance.tools();
                };
            }(options);
        }
    });
})();


//jq watch event
(function ($) {
    $.fn.watch = function (callback) {
        return this.each(function () {
            //缓存以前的值
            $.data(this, 'originVal', $(this).val());

            //event
            $(this).on('keyup paste', function () {
                var originVal = $.data(this, 'originVal');
                var currentVal = $(this).val();

                if (originVal !== currentVal) {
                    $.data(this, 'originVal', $(this).val());
                    callback(currentVal);
                }
            });
        });
    }
})(jQuery);
